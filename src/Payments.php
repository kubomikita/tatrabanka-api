<?php declare(strict_types=1);

namespace TatraBankaApi;

class Payments extends TatraBankaApi
{
	/** @var string */
	protected $scope = 'payments';



	/**
	 * @param string
	 * @return mixed
	 */
	public function getPaymentStatus(string $orderId)
	{
		$this->validateParameterOrderId($orderId);
		return $this->sendApiRequest('payments/' . $orderId . '/status', 'GET');
	}



	/**
	 * @return mixed
	 */
	public function postPaymentSubmission()
	{
		return $this->sendApiRequest('payments/submission', 'POST');
	}



	/**
	 * @param string Technical identification of the payment generated by a client.
	 * @param \TatraBankaApi\PaymentParticipant The set of data items related to a debtor of a financial transaction.
	 * @param \TatraBankaApi\PaymentParticipant The set of data items related to a creditor of a financial transaction.
	 * @param \TatraBankaApi\PaymentAmount Generic object for expression of financial amounts.
	 * @param \DateTime The bank date of the desired payment execution.
	 * @param \DateTime The date and time in RFC3339 format (https://tools.ietf.org/html/rfc3339) at which a particular action has been requested or executed.
	 * @param string Unique identification defined by a requestor.
	 * @param string Unstructured information about the payment details.
	 * @return mixed
	 */
	public function postPaymentSba(string $instructionIdentification, PaymentParticipant $debtor, PaymentParticipant $creditor, PaymentAmount $instructedAmount, \DateTime $requestedExecutionDate, \DateTime $creationDateTime = NULL, $endToEndIdentification = NULL, $remittanceInformation = NULL)
	{
		$this->validateParameterInstructionIdentification($instructionIdentification);
		$this->validateParameterRemittanceInformation($remittanceInformation);
		$this->validateParameterEndToEndIdentification($endToEndIdentification);

		$params = [
			'instructionIdentification' => $instructionIdentification,
			'debtor' => [
				'name' => $debtor->getName(),
				'iban' => $debtor->getIban(),
			],
			'creditor' => [
				'name' => $creditor->getName(),
				'iban' => $creditor->getIban(),
			],
			'instructedAmount' => [
				'value' => $instructedAmount->getValue(),
				'currency' => $instructedAmount->getCurrency(),
			],
			'requestedExecutionDate' => $requestedExecutionDate->format('Y-m-d'),
		];

		if ($creationDateTime !== NULL) {
			$params['creationDateTime'] = $creationDateTime->format('Y-m-d');
		}
		if ($endToEndIdentification) {
			$params['endToEndIdentification'] = $endToEndIdentification;
		}
		if ($remittanceInformation) {
			$params['remittanceInformation'] = $remittanceInformation;
		}

		return $this->sendApiRequest('payments/standard/sba', 'POST', $params, [], true);
	}



	/**
	 * @param string Technical identification of the payment generated by a client.
	 * @param \TatraBankaApi\PaymentParticipant The set of data items related to a debtor of a financial transaction.
	 * @param \TatraBankaApi\PaymentParticipant The set of data items related to a creditor of a financial transaction.
	 * @param \TatraBankaApi\PaymentAmount Generic object for expression of financial amounts.
	 * @param \DateTime The date and time in RFC3339 format (https://tools.ietf.org/html/rfc3339) at which a particular action has been requested or executed.
	 * @param string Unique identification defined by a requestor.
	 * @param string Unstructured information about the payment details.
	 * @return mixed
	 */
	public function postPaymentSbaEcomm(string $instructionIdentification, PaymentParticipant $debtor, PaymentParticipant $creditor, PaymentAmount $instructedAmount, \DateTime $creationDateTime = NULL, $endToEndIdentification = NULL, $remittanceInformation = NULL)
	{
		$this->validateParameterInstructionIdentification($instructionIdentification);
		$this->validateParameterRemittanceInformation($remittanceInformation);
		$this->validateParameterEndToEndIdentification($endToEndIdentification);

		$params = [
			'instructionIdentification' => $instructionIdentification,
			'debtor' => [
				'name' => $debtor->getName(),
				'iban' => $debtor->getIban(),
			],
			'creditor' => [
				'name' => $creditor->getName(),
				'iban' => $creditor->getIban(),
			],
			'instructedAmount' => [
				'value' => $instructedAmount->getValue(),
				'currency' => $instructedAmount->getCurrency(),
			],
		];

		if ($creationDateTime !== NULL) {
			$params['creationDateTime'] = $creationDateTime->format('Y-m-d');
		}
		if ($endToEndIdentification) {
			$params['endToEndIdentification'] = $endToEndIdentification;
		}
		if ($remittanceInformation) {
			$params['remittanceInformation'] = $remittanceInformation;
		}

		return $this->sendApiRequest('payments/ecomm/sba', 'POST', $params, [], true);
	}



	/**
	 * @param string
	 * @return bool
	 * @throws \TatraBankaApi\TatraBankaApiException
	 */
	public function requestAccessToken($code = NULL): bool
	{
		if ($code === NULL) {
			$response = $this->sendHttpRequest($this->getApiUrl() . '/auth/oauth/v2/token', 'POST', [
				'grant_type' => 'client_credentials',
				'scope' => 'PISP',
			], [
				'Authorization: Basic ' . base64_encode($this->clientId . ':' . $this->clientSecret),
			]);

		} else {
			$response = $this->sendHttpRequest($this->getApiUrl() . '/auth/oauth/v2/token', 'POST', [
				'grant_type' => 'authorization_code',
				'code' => $code,
				'redirect_uri' => $this->redirectUri,
			], [
				'Authorization: Basic ' . base64_encode($this->clientId . ':' . $this->clientSecret),
			]);
		}

		$token = json_decode($response);
		if (!$token) {
			throw new TatraBankaApiException('Unable to read JSON response');
		}

		if (isset($token->error)) {
			throw new TatraBankaApiException($token->error_description . ' (' . $token->error . ', http response is ' . $this->lastResponseCode . ')');
		}

		$this->setToken($token->access_token, NULL, (int) $token->expires_in, $token->token_type, $token->scope);

		return true;
	}



	/**
	 * @param string
	 * @throws \TatraBankaApi\TatraBankaApiException
	 */
	protected function validateParameterInstructionIdentification(string $value): void
	{
		if (!preg_match('~^[a-zA-Z0-9/\-?:().,\'\';+\s]{0,35}$~', $value)) {
			throw new TatraBankaApiException("Invalid instruction identification parameter '" . $value . "'.");
		}
	}



	/**
	 * @param string
	 * @throws \TatraBankaApi\TatraBankaApiException
	 */
	protected function validateParameterEndToEndIdentification(string $value = NULL): void
	{
		if ($value && !preg_match('~^[a-zA-Z0-9/\-?:().,\'\';+\s]{0,35}$~', $value)) {
			throw new TatraBankaApiException("Invalid end to end identification parameter '" . $value . "'.");
		}
	}



	/**
	 * @param string
	 * @throws \TatraBankaApi\TatraBankaApiException
	 */
	protected function validateParameterRemittanceInformation(string $value = NULL): void
	{
		if ($value && !preg_match('~^[a-zA-Z0-9/\-?:().,\'\';+\s]{0,140}$~', $value)) {
			throw new TatraBankaApiException("Invalid remittance information parameter '" . $value . "'.");
		}
	}



	/**
	 * @param string
	 * @throws \TatraBankaApi\TatraBankaApiException
	 */
	protected function validateParameterOrderId(string $orderId): void
	{
		if (!preg_match('~^[a-zA-Z0-9/\-?:().,\'\';+\s]{1,35}$~', $orderId)) {
			throw new TatraBankaApiException("Invalid orderId parameter '" . $orderId . "'.");
		}
	}
}
